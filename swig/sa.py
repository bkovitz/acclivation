# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sa')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sa')
    _sa = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sa', [dirname(__file__)])
        except ImportError:
            import _sa
            return _sa
        try:
            _mod = imp.load_module('_sa', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sa = swig_import_helper()
    del swig_import_helper
else:
    import _sa
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

M_PI = _sa.M_PI
MAXS = _sa.MAXS
UNWRITTEN = _sa.UNWRITTEN

def max(x, y):
    return _sa.max(x, y)
max = _sa.max

def make_random_seed():
    return _sa.make_random_seed()
make_random_seed = _sa.make_random_seed

def coin_flip():
    return _sa.coin_flip()
coin_flip = _sa.coin_flip

def rand_int(lb, ub):
    return _sa.rand_int(lb, ub)
rand_int = _sa.rand_int

def rand_double(lb, ub):
    return _sa.rand_double(lb, ub)
rand_double = _sa.rand_double

def rand_activation():
    return _sa.rand_activation()
rand_activation = _sa.rand_activation
SUM_INCOMING = _sa.SUM_INCOMING
MULT_INCOMING = _sa.MULT_INCOMING
MIN_INCOMING = _sa.MIN_INCOMING
SIGMOID_SUM = _sa.SIGMOID_SUM

def activation_type_string(activation_type):
    return _sa.activation_type_string(activation_type)
activation_type_string = _sa.activation_type_string
ONLY_SUM_INCOMING = _sa.ONLY_SUM_INCOMING
SUM_AND_MULT_INCOMING = _sa.SUM_AND_MULT_INCOMING
SUM_AND_MIN_INCOMING = _sa.SUM_AND_MIN_INCOMING
ONLY_SIGMOID_SUM = _sa.ONLY_SIGMOID_SUM

def activation_types_string(activation_types):
    return _sa.activation_types_string(activation_types)
activation_types_string = _sa.activation_types_string
EDGE_WEIGHTS_ONLY_PLUS_1 = _sa.EDGE_WEIGHTS_ONLY_PLUS_1
EDGE_WEIGHTS_POS_OR_NEG = _sa.EDGE_WEIGHTS_POS_OR_NEG

def edge_weights_string(edge_weights):
    return _sa.edge_weights_string(edge_weights)
edge_weights_string = _sa.edge_weights_string
PASS_THROUGH = _sa.PASS_THROUGH
STEEP_SIGMOID = _sa.STEEP_SIGMOID
ONLY_PASS_THROUGH = _sa.ONLY_PASS_THROUGH
PASS_THROUGH_AND_STEEP_SIGMOID = _sa.PASS_THROUGH_AND_STEEP_SIGMOID
class DATA(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DATA, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DATA, name)
    __repr__ = _swig_repr
    __swig_setmethods__["array"] = _sa.DATA_array_set
    __swig_getmethods__["array"] = _sa.DATA_array_get
    if _newclass:
        array = _swig_property(_sa.DATA_array_get, _sa.DATA_array_set)
    __swig_setmethods__["len"] = _sa.DATA_len_set
    __swig_getmethods__["len"] = _sa.DATA_len_get
    if _newclass:
        len = _swig_property(_sa.DATA_len_get, _sa.DATA_len_set)

    def __init__(self):
        this = _sa.new_DATA()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sa.delete_DATA
    __del__ = lambda self: None
DATA_swigregister = _sa.DATA_swigregister
DATA_swigregister(DATA)
cvar = _sa.cvar


def create_data():
    return _sa.create_data()
create_data = _sa.create_data

def free_data(data):
    return _sa.free_data(data)
free_data = _sa.free_data

def copy_data(data):
    return _sa.copy_data(data)
copy_data = _sa.copy_data

def add_datum(data, datum):
    return _sa.add_datum(data, datum)
add_datum = _sa.add_datum

def reset_data(data):
    return _sa.reset_data(data)
reset_data = _sa.reset_data

def compar_double(pa, pb):
    return _sa.compar_double(pa, pb)
compar_double = _sa.compar_double

def make_sorted_data(data):
    return _sa.make_sorted_data(data)
make_sorted_data = _sa.make_sorted_data

def print_data(data):
    return _sa.print_data(data)
print_data = _sa.print_data

def sum_data(data):
    return _sa.sum_data(data)
sum_data = _sa.sum_data

def average_data(data):
    return _sa.average_data(data)
average_data = _sa.average_data

def print_stats(data):
    return _sa.print_stats(data)
print_stats = _sa.print_stats

def step(x):
    return _sa.step(x)
step = _sa.step

def two_step(x):
    return _sa.two_step(x)
two_step = _sa.two_step

def clamp(x):
    return _sa.clamp(x)
clamp = _sa.clamp

def clamp2(x, lb, ub):
    return _sa.clamp2(x, lb, ub)
clamp2 = _sa.clamp2

def rand_float():
    return _sa.rand_float()
rand_float = _sa.rand_float

def sample_normal(sigma):
    return _sa.sample_normal(sigma)
sample_normal = _sa.sample_normal

def sigmoid(x):
    return _sa.sigmoid(x)
sigmoid = _sa.sigmoid

def steep_sigmoid(x, xcenter, slope):
    return _sa.steep_sigmoid(x, xcenter, slope)
steep_sigmoid = _sa.steep_sigmoid
class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["in_use"] = _sa.Node_in_use_set
    __swig_getmethods__["in_use"] = _sa.Node_in_use_get
    if _newclass:
        in_use = _swig_property(_sa.Node_in_use_get, _sa.Node_in_use_set)
    __swig_setmethods__["initial_activation"] = _sa.Node_initial_activation_set
    __swig_getmethods__["initial_activation"] = _sa.Node_initial_activation_get
    if _newclass:
        initial_activation = _swig_property(_sa.Node_initial_activation_get, _sa.Node_initial_activation_set)
    __swig_setmethods__["final_activation"] = _sa.Node_final_activation_set
    __swig_getmethods__["final_activation"] = _sa.Node_final_activation_get
    if _newclass:
        final_activation = _swig_property(_sa.Node_final_activation_get, _sa.Node_final_activation_set)
    __swig_setmethods__["control"] = _sa.Node_control_set
    __swig_getmethods__["control"] = _sa.Node_control_get
    if _newclass:
        control = _swig_property(_sa.Node_control_get, _sa.Node_control_set)
    __swig_setmethods__["output"] = _sa.Node_output_set
    __swig_getmethods__["output"] = _sa.Node_output_get
    if _newclass:
        output = _swig_property(_sa.Node_output_get, _sa.Node_output_set)
    __swig_setmethods__["threshold_func"] = _sa.Node_threshold_func_set
    __swig_getmethods__["threshold_func"] = _sa.Node_threshold_func_get
    if _newclass:
        threshold_func = _swig_property(_sa.Node_threshold_func_get, _sa.Node_threshold_func_set)
    __swig_setmethods__["activation_type"] = _sa.Node_activation_type_set
    __swig_getmethods__["activation_type"] = _sa.Node_activation_type_get
    if _newclass:
        activation_type = _swig_property(_sa.Node_activation_type_get, _sa.Node_activation_type_set)
    __swig_setmethods__["output_type"] = _sa.Node_output_type_set
    __swig_getmethods__["output_type"] = _sa.Node_output_type_get
    if _newclass:
        output_type = _swig_property(_sa.Node_output_type_get, _sa.Node_output_type_set)

    def __init__(self):
        this = _sa.new_Node()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sa.delete_Node
    __del__ = lambda self: None
Node_swigregister = _sa.Node_swigregister
Node_swigregister(Node)

class Edge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Edge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Edge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["src"] = _sa.Edge_src_set
    __swig_getmethods__["src"] = _sa.Edge_src_get
    if _newclass:
        src = _swig_property(_sa.Edge_src_get, _sa.Edge_src_set)
    __swig_setmethods__["dst"] = _sa.Edge_dst_set
    __swig_getmethods__["dst"] = _sa.Edge_dst_get
    if _newclass:
        dst = _swig_property(_sa.Edge_dst_get, _sa.Edge_dst_set)
    __swig_setmethods__["weight"] = _sa.Edge_weight_set
    __swig_getmethods__["weight"] = _sa.Edge_weight_get
    if _newclass:
        weight = _swig_property(_sa.Edge_weight_get, _sa.Edge_weight_set)

    def __init__(self):
        this = _sa.new_Edge()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sa.delete_Edge
    __del__ = lambda self: None
Edge_swigregister = _sa.Edge_swigregister
Edge_swigregister(Edge)

class Genotype(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Genotype, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Genotype, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nodes"] = _sa.Genotype_nodes_set
    __swig_getmethods__["nodes"] = _sa.Genotype_nodes_get
    if _newclass:
        nodes = _swig_property(_sa.Genotype_nodes_get, _sa.Genotype_nodes_set)
    __swig_setmethods__["edges"] = _sa.Genotype_edges_set
    __swig_getmethods__["edges"] = _sa.Genotype_edges_get
    if _newclass:
        edges = _swig_property(_sa.Genotype_edges_get, _sa.Genotype_edges_set)
    __swig_setmethods__["num_nodes"] = _sa.Genotype_num_nodes_set
    __swig_getmethods__["num_nodes"] = _sa.Genotype_num_nodes_get
    if _newclass:
        num_nodes = _swig_property(_sa.Genotype_num_nodes_get, _sa.Genotype_num_nodes_set)
    __swig_setmethods__["num_nodes_in_use"] = _sa.Genotype_num_nodes_in_use_set
    __swig_getmethods__["num_nodes_in_use"] = _sa.Genotype_num_nodes_in_use_get
    if _newclass:
        num_nodes_in_use = _swig_property(_sa.Genotype_num_nodes_in_use_get, _sa.Genotype_num_nodes_in_use_set)
    __swig_setmethods__["num_edges"] = _sa.Genotype_num_edges_set
    __swig_getmethods__["num_edges"] = _sa.Genotype_num_edges_get
    if _newclass:
        num_edges = _swig_property(_sa.Genotype_num_edges_get, _sa.Genotype_num_edges_set)
    __swig_setmethods__["num_in"] = _sa.Genotype_num_in_set
    __swig_getmethods__["num_in"] = _sa.Genotype_num_in_get
    if _newclass:
        num_in = _swig_property(_sa.Genotype_num_in_get, _sa.Genotype_num_in_set)
    __swig_setmethods__["num_out"] = _sa.Genotype_num_out_set
    __swig_getmethods__["num_out"] = _sa.Genotype_num_out_get
    if _newclass:
        num_out = _swig_property(_sa.Genotype_num_out_get, _sa.Genotype_num_out_set)

    def __init__(self):
        this = _sa.new_Genotype()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sa.delete_Genotype
    __del__ = lambda self: None
Genotype_swigregister = _sa.Genotype_swigregister
Genotype_swigregister(Genotype)


def select_in_use_node(g):
    return _sa.select_in_use_node(g)
select_in_use_node = _sa.select_in_use_node

def select_in_use_removable_node(g):
    return _sa.select_in_use_removable_node(g)
select_in_use_removable_node = _sa.select_in_use_removable_node

def take_first_unused_node(g):
    return _sa.take_first_unused_node(g)
take_first_unused_node = _sa.take_first_unused_node

def print_genotype(g):
    return _sa.print_genotype(g)
print_genotype = _sa.print_genotype

def free_genotype(g):
    return _sa.free_genotype(g)
free_genotype = _sa.free_genotype

def copy_genotype(g):
    return _sa.copy_genotype(g)
copy_genotype = _sa.copy_genotype

def print_phenotype(g):
    return _sa.print_phenotype(g)
print_phenotype = _sa.print_phenotype
class Organism(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Organism, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Organism, name)
    __repr__ = _swig_repr
    __swig_setmethods__["genotype"] = _sa.Organism_genotype_set
    __swig_getmethods__["genotype"] = _sa.Organism_genotype_get
    if _newclass:
        genotype = _swig_property(_sa.Organism_genotype_get, _sa.Organism_genotype_set)
    __swig_setmethods__["fitness"] = _sa.Organism_fitness_set
    __swig_getmethods__["fitness"] = _sa.Organism_fitness_get
    if _newclass:
        fitness = _swig_property(_sa.Organism_fitness_get, _sa.Organism_fitness_set)
    __swig_setmethods__["from_turned_knob"] = _sa.Organism_from_turned_knob_set
    __swig_getmethods__["from_turned_knob"] = _sa.Organism_from_turned_knob_get
    if _newclass:
        from_turned_knob = _swig_property(_sa.Organism_from_turned_knob_get, _sa.Organism_from_turned_knob_set)

    def __init__(self):
        this = _sa.new_Organism()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sa.delete_Organism
    __del__ = lambda self: None
Organism_swigregister = _sa.Organism_swigregister
Organism_swigregister(Organism)


def free_organism(o):
    return _sa.free_organism(o)
free_organism = _sa.free_organism

def free_organisms(organisms, num_organisms):
    return _sa.free_organisms(organisms, num_organisms)
free_organisms = _sa.free_organisms

def copy_organism(o):
    return _sa.copy_organism(o)
copy_organism = _sa.copy_organism
class ANCESTOR_LOG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANCESTOR_LOG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ANCESTOR_LOG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enabled"] = _sa.ANCESTOR_LOG_enabled_set
    __swig_getmethods__["enabled"] = _sa.ANCESTOR_LOG_enabled_get
    if _newclass:
        enabled = _swig_property(_sa.ANCESTOR_LOG_enabled_get, _sa.ANCESTOR_LOG_enabled_set)
    __swig_setmethods__["path"] = _sa.ANCESTOR_LOG_path_set
    __swig_getmethods__["path"] = _sa.ANCESTOR_LOG_path_get
    if _newclass:
        path = _swig_property(_sa.ANCESTOR_LOG_path_get, _sa.ANCESTOR_LOG_path_set)
    __swig_setmethods__["f"] = _sa.ANCESTOR_LOG_f_set
    __swig_getmethods__["f"] = _sa.ANCESTOR_LOG_f_get
    if _newclass:
        f = _swig_property(_sa.ANCESTOR_LOG_f_get, _sa.ANCESTOR_LOG_f_set)

    def __init__(self):
        this = _sa.new_ANCESTOR_LOG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sa.delete_ANCESTOR_LOG
    __del__ = lambda self: None
ANCESTOR_LOG_swigregister = _sa.ANCESTOR_LOG_swigregister
ANCESTOR_LOG_swigregister(ANCESTOR_LOG)


def create_ancestor_log():
    return _sa.create_ancestor_log()
create_ancestor_log = _sa.create_ancestor_log

def free_ancestor_log(log):
    return _sa.free_ancestor_log(log)
free_ancestor_log = _sa.free_ancestor_log

def open_ancestor_log(log):
    return _sa.open_ancestor_log(log)
open_ancestor_log = _sa.open_ancestor_log

def close_ancestor_log(log):
    return _sa.close_ancestor_log(log)
close_ancestor_log = _sa.close_ancestor_log
LINE = _sa.LINE
CIRCLE = _sa.CIRCLE
class World(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, World, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, World, name)
    __repr__ = _swig_repr
    __swig_setmethods__["seed"] = _sa.World_seed_set
    __swig_getmethods__["seed"] = _sa.World_seed_get
    if _newclass:
        seed = _swig_property(_sa.World_seed_get, _sa.World_seed_set)
    __swig_setmethods__["num_organisms"] = _sa.World_num_organisms_set
    __swig_getmethods__["num_organisms"] = _sa.World_num_organisms_get
    if _newclass:
        num_organisms = _swig_property(_sa.World_num_organisms_get, _sa.World_num_organisms_set)
    __swig_setmethods__["sa_timesteps"] = _sa.World_sa_timesteps_set
    __swig_getmethods__["sa_timesteps"] = _sa.World_sa_timesteps_get
    if _newclass:
        sa_timesteps = _swig_property(_sa.World_sa_timesteps_get, _sa.World_sa_timesteps_set)
    __swig_setmethods__["generations_per_epoch"] = _sa.World_generations_per_epoch_set
    __swig_getmethods__["generations_per_epoch"] = _sa.World_generations_per_epoch_get
    if _newclass:
        generations_per_epoch = _swig_property(_sa.World_generations_per_epoch_get, _sa.World_generations_per_epoch_set)
    __swig_setmethods__["num_epochs"] = _sa.World_num_epochs_set
    __swig_getmethods__["num_epochs"] = _sa.World_num_epochs_get
    if _newclass:
        num_epochs = _swig_property(_sa.World_num_epochs_get, _sa.World_num_epochs_set)
    __swig_setmethods__["num_nodes"] = _sa.World_num_nodes_set
    __swig_getmethods__["num_nodes"] = _sa.World_num_nodes_get
    if _newclass:
        num_nodes = _swig_property(_sa.World_num_nodes_get, _sa.World_num_nodes_set)
    __swig_setmethods__["num_edges"] = _sa.World_num_edges_set
    __swig_getmethods__["num_edges"] = _sa.World_num_edges_get
    if _newclass:
        num_edges = _swig_property(_sa.World_num_edges_get, _sa.World_num_edges_set)
    __swig_setmethods__["num_in"] = _sa.World_num_in_set
    __swig_getmethods__["num_in"] = _sa.World_num_in_get
    if _newclass:
        num_in = _swig_property(_sa.World_num_in_get, _sa.World_num_in_set)
    __swig_setmethods__["num_out"] = _sa.World_num_out_set
    __swig_getmethods__["num_out"] = _sa.World_num_out_get
    if _newclass:
        num_out = _swig_property(_sa.World_num_out_get, _sa.World_num_out_set)
    __swig_setmethods__["decay"] = _sa.World_decay_set
    __swig_getmethods__["decay"] = _sa.World_decay_get
    if _newclass:
        decay = _swig_property(_sa.World_decay_get, _sa.World_decay_set)
    __swig_setmethods__["spreading_rate"] = _sa.World_spreading_rate_set
    __swig_getmethods__["spreading_rate"] = _sa.World_spreading_rate_get
    if _newclass:
        spreading_rate = _swig_property(_sa.World_spreading_rate_get, _sa.World_spreading_rate_set)
    __swig_setmethods__["activation_types"] = _sa.World_activation_types_set
    __swig_getmethods__["activation_types"] = _sa.World_activation_types_get
    if _newclass:
        activation_types = _swig_property(_sa.World_activation_types_get, _sa.World_activation_types_set)
    __swig_setmethods__["edge_weights"] = _sa.World_edge_weights_set
    __swig_getmethods__["edge_weights"] = _sa.World_edge_weights_get
    if _newclass:
        edge_weights = _swig_property(_sa.World_edge_weights_get, _sa.World_edge_weights_set)
    __swig_setmethods__["output_types"] = _sa.World_output_types_set
    __swig_getmethods__["output_types"] = _sa.World_output_types_get
    if _newclass:
        output_types = _swig_property(_sa.World_output_types_get, _sa.World_output_types_set)
    __swig_setmethods__["multi_edges"] = _sa.World_multi_edges_set
    __swig_getmethods__["multi_edges"] = _sa.World_multi_edges_get
    if _newclass:
        multi_edges = _swig_property(_sa.World_multi_edges_get, _sa.World_multi_edges_set)
    __swig_setmethods__["allow_move_edge"] = _sa.World_allow_move_edge_set
    __swig_getmethods__["allow_move_edge"] = _sa.World_allow_move_edge_get
    if _newclass:
        allow_move_edge = _swig_property(_sa.World_allow_move_edge_get, _sa.World_allow_move_edge_set)
    __swig_setmethods__["organisms"] = _sa.World_organisms_set
    __swig_getmethods__["organisms"] = _sa.World_organisms_get
    if _newclass:
        organisms = _swig_property(_sa.World_organisms_get, _sa.World_organisms_set)
    __swig_setmethods__["phenotype_fitness_func"] = _sa.World_phenotype_fitness_func_set
    __swig_getmethods__["phenotype_fitness_func"] = _sa.World_phenotype_fitness_func_get
    if _newclass:
        phenotype_fitness_func = _swig_property(_sa.World_phenotype_fitness_func_get, _sa.World_phenotype_fitness_func_set)
    __swig_setmethods__["distance_weight"] = _sa.World_distance_weight_set
    __swig_getmethods__["distance_weight"] = _sa.World_distance_weight_get
    if _newclass:
        distance_weight = _swig_property(_sa.World_distance_weight_get, _sa.World_distance_weight_set)
    __swig_setmethods__["bumps"] = _sa.World_bumps_set
    __swig_getmethods__["bumps"] = _sa.World_bumps_get
    if _newclass:
        bumps = _swig_property(_sa.World_bumps_get, _sa.World_bumps_set)
    __swig_setmethods__["epoch"] = _sa.World_epoch_set
    __swig_getmethods__["epoch"] = _sa.World_epoch_get
    if _newclass:
        epoch = _swig_property(_sa.World_epoch_get, _sa.World_epoch_set)
    __swig_setmethods__["generation"] = _sa.World_generation_set
    __swig_getmethods__["generation"] = _sa.World_generation_get
    if _newclass:
        generation = _swig_property(_sa.World_generation_get, _sa.World_generation_set)
    __swig_setmethods__["c1"] = _sa.World_c1_set
    __swig_getmethods__["c1"] = _sa.World_c1_get
    if _newclass:
        c1 = _swig_property(_sa.World_c1_get, _sa.World_c1_set)
    __swig_setmethods__["c2"] = _sa.World_c2_set
    __swig_getmethods__["c2"] = _sa.World_c2_get
    if _newclass:
        c2 = _swig_property(_sa.World_c2_get, _sa.World_c2_set)
    __swig_setmethods__["c3"] = _sa.World_c3_set
    __swig_getmethods__["c3"] = _sa.World_c3_get
    if _newclass:
        c3 = _swig_property(_sa.World_c3_get, _sa.World_c3_set)
    __swig_setmethods__["c1_lb"] = _sa.World_c1_lb_set
    __swig_getmethods__["c1_lb"] = _sa.World_c1_lb_get
    if _newclass:
        c1_lb = _swig_property(_sa.World_c1_lb_get, _sa.World_c1_lb_set)
    __swig_setmethods__["c1_ub"] = _sa.World_c1_ub_set
    __swig_getmethods__["c1_ub"] = _sa.World_c1_ub_get
    if _newclass:
        c1_ub = _swig_property(_sa.World_c1_ub_get, _sa.World_c1_ub_set)
    __swig_setmethods__["peak_x"] = _sa.World_peak_x_set
    __swig_getmethods__["peak_x"] = _sa.World_peak_x_get
    if _newclass:
        peak_x = _swig_property(_sa.World_peak_x_get, _sa.World_peak_x_set)
    __swig_setmethods__["peak_y"] = _sa.World_peak_y_set
    __swig_getmethods__["peak_y"] = _sa.World_peak_y_get
    if _newclass:
        peak_y = _swig_property(_sa.World_peak_y_get, _sa.World_peak_y_set)
    __swig_setmethods__["peak_movement"] = _sa.World_peak_movement_set
    __swig_getmethods__["peak_movement"] = _sa.World_peak_movement_get
    if _newclass:
        peak_movement = _swig_property(_sa.World_peak_movement_get, _sa.World_peak_movement_set)
    __swig_setmethods__["max_dist"] = _sa.World_max_dist_set
    __swig_getmethods__["max_dist"] = _sa.World_max_dist_get
    if _newclass:
        max_dist = _swig_property(_sa.World_max_dist_get, _sa.World_max_dist_set)
    __swig_setmethods__["ridge_type"] = _sa.World_ridge_type_set
    __swig_getmethods__["ridge_type"] = _sa.World_ridge_type_get
    if _newclass:
        ridge_type = _swig_property(_sa.World_ridge_type_get, _sa.World_ridge_type_set)
    __swig_setmethods__["ridge_radius"] = _sa.World_ridge_radius_set
    __swig_getmethods__["ridge_radius"] = _sa.World_ridge_radius_get
    if _newclass:
        ridge_radius = _swig_property(_sa.World_ridge_radius_get, _sa.World_ridge_radius_set)
    __swig_setmethods__["mutation_type_ub"] = _sa.World_mutation_type_ub_set
    __swig_getmethods__["mutation_type_ub"] = _sa.World_mutation_type_ub_get
    if _newclass:
        mutation_type_ub = _swig_property(_sa.World_mutation_type_ub_get, _sa.World_mutation_type_ub_set)
    __swig_setmethods__["extra_mutation_rate"] = _sa.World_extra_mutation_rate_set
    __swig_getmethods__["extra_mutation_rate"] = _sa.World_extra_mutation_rate_get
    if _newclass:
        extra_mutation_rate = _swig_property(_sa.World_extra_mutation_rate_get, _sa.World_extra_mutation_rate_set)
    __swig_setmethods__["crossover_freq"] = _sa.World_crossover_freq_set
    __swig_getmethods__["crossover_freq"] = _sa.World_crossover_freq_get
    if _newclass:
        crossover_freq = _swig_property(_sa.World_crossover_freq_get, _sa.World_crossover_freq_set)
    __swig_setmethods__["edge_inheritance"] = _sa.World_edge_inheritance_set
    __swig_getmethods__["edge_inheritance"] = _sa.World_edge_inheritance_get
    if _newclass:
        edge_inheritance = _swig_property(_sa.World_edge_inheritance_get, _sa.World_edge_inheritance_set)
    __swig_setmethods__["num_candidates"] = _sa.World_num_candidates_set
    __swig_getmethods__["num_candidates"] = _sa.World_num_candidates_get
    if _newclass:
        num_candidates = _swig_property(_sa.World_num_candidates_get, _sa.World_num_candidates_set)
    __swig_setmethods__["knob_constant"] = _sa.World_knob_constant_set
    __swig_getmethods__["knob_constant"] = _sa.World_knob_constant_get
    if _newclass:
        knob_constant = _swig_property(_sa.World_knob_constant_get, _sa.World_knob_constant_set)
    __swig_setmethods__["knob_type"] = _sa.World_knob_type_set
    __swig_getmethods__["knob_type"] = _sa.World_knob_type_get
    if _newclass:
        knob_type = _swig_property(_sa.World_knob_type_get, _sa.World_knob_type_set)
    __swig_setmethods__["dump_fitness_nbhd"] = _sa.World_dump_fitness_nbhd_set
    __swig_getmethods__["dump_fitness_nbhd"] = _sa.World_dump_fitness_nbhd_get
    if _newclass:
        dump_fitness_nbhd = _swig_property(_sa.World_dump_fitness_nbhd_get, _sa.World_dump_fitness_nbhd_set)
    __swig_setmethods__["dump_fitness_epoch"] = _sa.World_dump_fitness_epoch_set
    __swig_getmethods__["dump_fitness_epoch"] = _sa.World_dump_fitness_epoch_get
    if _newclass:
        dump_fitness_epoch = _swig_property(_sa.World_dump_fitness_epoch_get, _sa.World_dump_fitness_epoch_set)
    __swig_setmethods__["dump_fitness_generation"] = _sa.World_dump_fitness_generation_set
    __swig_getmethods__["dump_fitness_generation"] = _sa.World_dump_fitness_generation_get
    if _newclass:
        dump_fitness_generation = _swig_property(_sa.World_dump_fitness_generation_get, _sa.World_dump_fitness_generation_set)
    __swig_setmethods__["epoch_fitness_deltas"] = _sa.World_epoch_fitness_deltas_set
    __swig_getmethods__["epoch_fitness_deltas"] = _sa.World_epoch_fitness_deltas_get
    if _newclass:
        epoch_fitness_deltas = _swig_property(_sa.World_epoch_fitness_deltas_get, _sa.World_epoch_fitness_deltas_set)
    __swig_setmethods__["log"] = _sa.World_log_set
    __swig_getmethods__["log"] = _sa.World_log_get
    if _newclass:
        log = _swig_property(_sa.World_log_get, _sa.World_log_set)
    __swig_setmethods__["num_hill_climbers"] = _sa.World_num_hill_climbers_set
    __swig_getmethods__["num_hill_climbers"] = _sa.World_num_hill_climbers_get
    if _newclass:
        num_hill_climbers = _swig_property(_sa.World_num_hill_climbers_get, _sa.World_num_hill_climbers_set)
    __swig_setmethods__["num_generations_measured"] = _sa.World_num_generations_measured_set
    __swig_getmethods__["num_generations_measured"] = _sa.World_num_generations_measured_get
    if _newclass:
        num_generations_measured = _swig_property(_sa.World_num_generations_measured_get, _sa.World_num_generations_measured_set)
    __swig_setmethods__["num_fitness_increases_from_knob_turn"] = _sa.World_num_fitness_increases_from_knob_turn_set
    __swig_getmethods__["num_fitness_increases_from_knob_turn"] = _sa.World_num_fitness_increases_from_knob_turn_get
    if _newclass:
        num_fitness_increases_from_knob_turn = _swig_property(_sa.World_num_fitness_increases_from_knob_turn_get, _sa.World_num_fitness_increases_from_knob_turn_set)

    def __init__(self):
        this = _sa.new_World()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sa.delete_World
    __del__ = lambda self: None
World_swigregister = _sa.World_swigregister
World_swigregister(World)
JUMPY_PEAK_MOVEMENT = _sa.JUMPY_PEAK_MOVEMENT
GRADUAL_PEAK_MOVEMENT = _sa.GRADUAL_PEAK_MOVEMENT
NO_EDGES_ACROSS_PARENTS = _sa.NO_EDGES_ACROSS_PARENTS
INHERIT_SRC_EDGES_FROM_MOMMY = _sa.INHERIT_SRC_EDGES_FROM_MOMMY
INHERIT_SRC_EDGES_FROM_BOTH_PARENTS = _sa.INHERIT_SRC_EDGES_FROM_BOTH_PARENTS
INHERIT_HALF_OF_CROSSOVER_EDGES = _sa.INHERIT_HALF_OF_CROSSOVER_EDGES
INHERIT_HALF_OF_ALL_EDGES = _sa.INHERIT_HALF_OF_ALL_EDGES
INHERIT_ALL_EDGES = _sa.INHERIT_ALL_EDGES
KNOB_DISCRETE = _sa.KNOB_DISCRETE
KNOB_NORMAL = _sa.KNOB_NORMAL


def phenotype_fitness(arg1, arg2):
    return _sa.phenotype_fitness(arg1, arg2)
phenotype_fitness = _sa.phenotype_fitness

def create_world():
    return _sa.create_world()
create_world = _sa.create_world

def is_gvector_index(w, index):
    return _sa.is_gvector_index(w, index)
is_gvector_index = _sa.is_gvector_index

def is_phenotype_index(w, index):
    return _sa.is_phenotype_index(w, index)
is_phenotype_index = _sa.is_phenotype_index

def rand_initial_activation(w):
    return _sa.rand_initial_activation(w)
rand_initial_activation = _sa.rand_initial_activation

def init_initial_activation(w, node, index):
    return _sa.init_initial_activation(w, node, index)
init_initial_activation = _sa.init_initial_activation

def rand_edge_weight(w):
    return _sa.rand_edge_weight(w)
rand_edge_weight = _sa.rand_edge_weight

def node_output(node, activation):
    return _sa.node_output(node, activation)
node_output = _sa.node_output

def init_random_node(w, n, index):
    return _sa.init_random_node(w, n, index)
init_random_node = _sa.init_random_node

def add_edge(arg1, arg2, arg3, arg4, arg5):
    return _sa.add_edge(arg1, arg2, arg3, arg4, arg5)
add_edge = _sa.add_edge

def create_random_genotype(w):
    return _sa.create_random_genotype(w)
create_random_genotype = _sa.create_random_genotype

def create_random_organism(w):
    return _sa.create_random_organism(w)
create_random_organism = _sa.create_random_organism

def print_organism_dot(w, o, f):
    return _sa.print_organism_dot(w, o, f)
print_organism_dot = _sa.print_organism_dot

def init_activations(g, activations):
    return _sa.init_activations(g, activations)
init_activations = _sa.init_activations

def print_all_activations(g, activations):
    return _sa.print_all_activations(g, activations)
print_all_activations = _sa.print_all_activations

def src_output(src, index, activations):
    return _sa.src_output(src, index, activations)
src_output = _sa.src_output

def control_value(input):
    return _sa.control_value(input)
control_value = _sa.control_value

def sa(o, timesteps, decay, spreading_rate):
    return _sa.sa(o, timesteps, decay, spreading_rate)
sa = _sa.sa

def sanity_check(w):
    return _sa.sanity_check(w)
sanity_check = _sa.sanity_check

def set_phenotypes_and_fitnesses(w):
    return _sa.set_phenotypes_and_fitnesses(w)
set_phenotypes_and_fitnesses = _sa.set_phenotypes_and_fitnesses

def init_random_population(w):
    return _sa.init_random_population(w)
init_random_population = _sa.init_random_population

def mutate(w, arg2):
    return _sa.mutate(w, arg2)
mutate = _sa.mutate

def tournament_select(w):
    return _sa.tournament_select(w)
tournament_select = _sa.tournament_select

def crossover(arg1, arg2, arg3):
    return _sa.crossover(arg1, arg2, arg3)
crossover = _sa.crossover

def sanity_check_organism(w, o):
    return _sa.sanity_check_organism(w, o)
sanity_check_organism = _sa.sanity_check_organism

def log_organisms(w):
    return _sa.log_organisms(w)
log_organisms = _sa.log_organisms

def prev_generation(w):
    return _sa.prev_generation(w)
prev_generation = _sa.prev_generation

def maybe_prev_epoch(w):
    return _sa.maybe_prev_epoch(w)
maybe_prev_epoch = _sa.maybe_prev_epoch

def log_mutation_start(w, parent, child):
    return _sa.log_mutation_start(w, parent, child)
log_mutation_start = _sa.log_mutation_start

def log_mutation(w, type):
    return _sa.log_mutation(w, type)
log_mutation = _sa.log_mutation

def log_mutation_end(w):
    return _sa.log_mutation_end(w)
log_mutation_end = _sa.log_mutation_end

def log_crossover(w, mommy, daddy, child):
    return _sa.log_crossover(w, mommy, daddy, child)
log_crossover = _sa.log_crossover

def dump_fitness_nbhd(w):
    return _sa.dump_fitness_nbhd(w)
dump_fitness_nbhd = _sa.dump_fitness_nbhd

def run_generation(w):
    return _sa.run_generation(w)
run_generation = _sa.run_generation

def find_best_organism_in(organisms, num_organisms):
    return _sa.find_best_organism_in(organisms, num_organisms)
find_best_organism_in = _sa.find_best_organism_in

def find_best_organism(w):
    return _sa.find_best_organism(w)
find_best_organism = _sa.find_best_organism

def find_best_fitness(w):
    return _sa.find_best_fitness(w)
find_best_fitness = _sa.find_best_fitness

def print_best_fitness(w):
    return _sa.print_best_fitness(w)
print_best_fitness = _sa.print_best_fitness

def print_generation_results(w):
    return _sa.print_generation_results(w)
print_generation_results = _sa.print_generation_results

def set_random_gvector(o):
    return _sa.set_random_gvector(o)
set_random_gvector = _sa.set_random_gvector

def nudge_candidate(o, node_index, nudge_amount):
    return _sa.nudge_candidate(o, node_index, nudge_amount)
nudge_candidate = _sa.nudge_candidate
class HILL_CLIMBING_RESULT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HILL_CLIMBING_RESULT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HILL_CLIMBING_RESULT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fitness_delta"] = _sa.HILL_CLIMBING_RESULT_fitness_delta_set
    __swig_getmethods__["fitness_delta"] = _sa.HILL_CLIMBING_RESULT_fitness_delta_get
    if _newclass:
        fitness_delta = _swig_property(_sa.HILL_CLIMBING_RESULT_fitness_delta_get, _sa.HILL_CLIMBING_RESULT_fitness_delta_set)
    __swig_setmethods__["ending_fitness"] = _sa.HILL_CLIMBING_RESULT_ending_fitness_set
    __swig_getmethods__["ending_fitness"] = _sa.HILL_CLIMBING_RESULT_ending_fitness_get
    if _newclass:
        ending_fitness = _swig_property(_sa.HILL_CLIMBING_RESULT_ending_fitness_get, _sa.HILL_CLIMBING_RESULT_ending_fitness_set)

    def __init__(self):
        this = _sa.new_HILL_CLIMBING_RESULT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sa.delete_HILL_CLIMBING_RESULT
    __del__ = lambda self: None
HILL_CLIMBING_RESULT_swigregister = _sa.HILL_CLIMBING_RESULT_swigregister
HILL_CLIMBING_RESULT_swigregister(HILL_CLIMBING_RESULT)


def climb_hill(w, o):
    return _sa.climb_hill(w, o)
climb_hill = _sa.climb_hill

def measure_acclivity(w, test_o):
    return _sa.measure_acclivity(w, test_o)
measure_acclivity = _sa.measure_acclivity

def phenotype_acclivity(w):
    return _sa.phenotype_acclivity(w)
phenotype_acclivity = _sa.phenotype_acclivity

def free_world(w):
    return _sa.free_world(w)
free_world = _sa.free_world

def distance(x1, y1, x2, y2):
    return _sa.distance(x1, y1, x2, y2)
distance = _sa.distance

def change_fitness_constants(w):
    return _sa.change_fitness_constants(w)
change_fitness_constants = _sa.change_fitness_constants

def check_knob_turn(w, last_fitness):
    return _sa.check_knob_turn(w, last_fitness)
check_knob_turn = _sa.check_knob_turn

def run_epoch(w, e):
    return _sa.run_epoch(w, e)
run_epoch = _sa.run_epoch

def dump_virtual_fitness_func(w):
    return _sa.dump_virtual_fitness_func(w)
dump_virtual_fitness_func = _sa.dump_virtual_fitness_func

def dump_phenotype_fitness_func(w):
    return _sa.dump_phenotype_fitness_func(w)
dump_phenotype_fitness_func = _sa.dump_phenotype_fitness_func

def print_world_params(w):
    return _sa.print_world_params(w)
print_world_params = _sa.print_world_params

def print_acclivity_measures_of_best(w):
    return _sa.print_acclivity_measures_of_best(w)
print_acclivity_measures_of_best = _sa.print_acclivity_measures_of_best

def print_knob_fitness_numbers(w):
    return _sa.print_knob_fitness_numbers(w)
print_knob_fitness_numbers = _sa.print_knob_fitness_numbers

def run_world(w):
    return _sa.run_world(w)
run_world = _sa.run_world

def many_small_hills(phenotype):
    return _sa.many_small_hills(phenotype)
many_small_hills = _sa.many_small_hills

def invv(target, radius, x):
    return _sa.invv(target, radius, x)
invv = _sa.invv

def along_ridge(w, x, y):
    return _sa.along_ridge(w, x, y)
along_ridge = _sa.along_ridge

def require_valid_region(w, x, y):
    return _sa.require_valid_region(w, x, y)
require_valid_region = _sa.require_valid_region

def has_node(g, n):
    return _sa.has_node(g, n)
has_node = _sa.has_node

def has_edge(g, src, dst):
    return _sa.has_edge(g, src, dst)
has_edge = _sa.has_edge

def mut_add_edge(w, o):
    return _sa.mut_add_edge(w, o)
mut_add_edge = _sa.mut_add_edge

def remove_edge(g, e):
    return _sa.remove_edge(g, e)
remove_edge = _sa.remove_edge

def mut_remove_edge(o):
    return _sa.mut_remove_edge(o)
mut_remove_edge = _sa.mut_remove_edge

def mut_move_edge(w, o):
    return _sa.mut_move_edge(w, o)
mut_move_edge = _sa.mut_move_edge

def mut_add_node(w, o):
    return _sa.mut_add_node(w, o)
mut_add_node = _sa.mut_add_node

def mut_remove_node(o):
    return _sa.mut_remove_node(o)
mut_remove_node = _sa.mut_remove_node

def mut_turn_knob(w, o):
    return _sa.mut_turn_knob(w, o)
mut_turn_knob = _sa.mut_turn_knob

def mut_alter_activation_type(w, o):
    return _sa.mut_alter_activation_type(w, o)
mut_alter_activation_type = _sa.mut_alter_activation_type

def mut_alter_output_type(w, o):
    return _sa.mut_alter_output_type(w, o)
mut_alter_output_type = _sa.mut_alter_output_type

def count_internal_edges(g, start, end):
    return _sa.count_internal_edges(g, start, end)
count_internal_edges = _sa.count_internal_edges

def sa_test():
    return _sa.sa_test()
sa_test = _sa.sa_test

def sa_test2():
    return _sa.sa_test2()
sa_test2 = _sa.sa_test2

def dump_phenotype_fitness():
    return _sa.dump_phenotype_fitness()
dump_phenotype_fitness = _sa.dump_phenotype_fitness

def quick_test(seed):
    return _sa.quick_test(seed)
quick_test = _sa.quick_test

def dot_test(seed):
    return _sa.dot_test(seed)
dot_test = _sa.dot_test

def horizontal_ridge(w):
    return _sa.horizontal_ridge(w)
horizontal_ridge = _sa.horizontal_ridge

def diagonal_ridge(w):
    return _sa.diagonal_ridge(w)
diagonal_ridge = _sa.diagonal_ridge

def oblique_ridge(w):
    return _sa.oblique_ridge(w)
oblique_ridge = _sa.oblique_ridge

def easier_oblique_ridge(w):
    return _sa.easier_oblique_ridge(w)
easier_oblique_ridge = _sa.easier_oblique_ridge

def long_test_start_small(seed):
    return _sa.long_test_start_small(seed)
long_test_start_small = _sa.long_test_start_small
class PARAMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PARAMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PARAMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _sa.PARAMS_id_set
    __swig_getmethods__["id"] = _sa.PARAMS_id_get
    if _newclass:
        id = _swig_property(_sa.PARAMS_id_get, _sa.PARAMS_id_set)
    __swig_setmethods__["seed"] = _sa.PARAMS_seed_set
    __swig_getmethods__["seed"] = _sa.PARAMS_seed_get
    if _newclass:
        seed = _swig_property(_sa.PARAMS_seed_get, _sa.PARAMS_seed_set)
    __swig_setmethods__["ridge_radius"] = _sa.PARAMS_ridge_radius_set
    __swig_getmethods__["ridge_radius"] = _sa.PARAMS_ridge_radius_get
    if _newclass:
        ridge_radius = _swig_property(_sa.PARAMS_ridge_radius_get, _sa.PARAMS_ridge_radius_set)
    __swig_setmethods__["ridge_type"] = _sa.PARAMS_ridge_type_set
    __swig_getmethods__["ridge_type"] = _sa.PARAMS_ridge_type_get
    if _newclass:
        ridge_type = _swig_property(_sa.PARAMS_ridge_type_get, _sa.PARAMS_ridge_type_set)
    __swig_setmethods__["edge_inheritance"] = _sa.PARAMS_edge_inheritance_set
    __swig_getmethods__["edge_inheritance"] = _sa.PARAMS_edge_inheritance_get
    if _newclass:
        edge_inheritance = _swig_property(_sa.PARAMS_edge_inheritance_get, _sa.PARAMS_edge_inheritance_set)

    def __init__(self):
        this = _sa.new_PARAMS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sa.delete_PARAMS
    __del__ = lambda self: None
PARAMS_swigregister = _sa.PARAMS_swigregister
PARAMS_swigregister(PARAMS)
YX_RIDGE = _sa.YX_RIDGE
OBLIQUE_RIDGE = _sa.OBLIQUE_RIDGE


def init_params(p, seed):
    return _sa.init_params(p, seed)
init_params = _sa.init_params

def reopen_stdout_from_param(p):
    return _sa.reopen_stdout_from_param(p)
reopen_stdout_from_param = _sa.reopen_stdout_from_param

def create_world_from_param(p):
    return _sa.create_world_from_param(p)
create_world_from_param = _sa.create_world_from_param

def one_long_epoch(seed):
    return _sa.one_long_epoch(seed)
one_long_epoch = _sa.one_long_epoch

def good_run_oblique():
    return _sa.good_run_oblique()
good_run_oblique = _sa.good_run_oblique

def good_run_oblique2():
    return _sa.good_run_oblique2()
good_run_oblique2 = _sa.good_run_oblique2

def good_run_with_bumps():
    return _sa.good_run_with_bumps()
good_run_with_bumps = _sa.good_run_with_bumps

def tom():
    return _sa.tom()
tom = _sa.tom

def get_seed(argv, argc):
    return _sa.get_seed(argv, argc)
get_seed = _sa.get_seed

def acclivation_test(seed):
    return _sa.acclivation_test(seed)
acclivation_test = _sa.acclivation_test

def run_from_options(argc, argv):
    return _sa.run_from_options(argc, argv)
run_from_options = _sa.run_from_options
# This file is compatible with both classic and new-style classes.


